import os,hashlib
MAGIC_BYTES = {
    "PDF": b"%PDF-",  # PDF files start with '%PDF-'
    "JPEG": b"\xFF\xD8\xFF",  # JPEG files start with 0xFF 0xD8 0xFF
    "PNG": b"\x89PNG\r\n\x1A\n",  # PNG files start with 0x89 'PNG' 0x0D 0x0A 0x1A 0x0A
    "ZIP": b"PK\x03\x04",  # ZIP files start with 'PK\x03\x04'
    "EXE": b"MZ",  # Executable files start with 'MZ'
}
def identify_file_type(file_path):
    """Identify file type based on magic bytes."""
    with open(file_path, 'rb') as f:
        file_start = f.read(8)  # Read first 8 bytes
    for file_type, magic in MAGIC_BYTES.items():
        if file_start.startswith(magic):
            return file_type
    return "Unknown" 
def compute_file_hash(file_path, algorithm='sha256'):
    """Compute file hash using specified algorithm."""
    hash_func = hashlib.new(algorithm)
    with open(file_path, 'rb') as f:
        while chunk := f.read(8192):
            hash_func.update(chunk)
    return hash_func.hexdigest() 
# Example usage:
if __name__ == "__main__":
    test_file = input("Enter the path of the file to analyze: ")
    if os.path.isfile(test_file): 
        file_type = identify_file_type(test_file)  
        file_hash = compute_file_hash(test_file) 
        print(f"File Type: {file_type}") 
        print(f"SHA-256 Hash: {file_hash}") 
    else:
        print("File does not exist.") 
# File: file_malware_analysis.py 
# Description: A simple script to identify file types based on magic bytes and compute file hashes. 
# Usage: Run the script and provide a file path to analyze its type and compute its SHA-256 hash.
# Note: This implementation is for educational purposes and may not cover all file types or edge cases. 
# Always use well-established libraries for production systems. 
# Ensure to handle exceptions and edge cases in real-world applications.
